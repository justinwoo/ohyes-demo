// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
    "use strict";

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["filter"] = $foreign.filter;
  exports["snoc"] = $foreign.snoc;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGetFn = function(label, rec) {
    return rec[label];
  };

  exports.unsafeHasFn = function(label, rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
})(PS["Data.Record.Unsafe"] = PS["Data.Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Record.Unsafe"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];         
  var unsafeHas = Data_Function_Uncurried.runFn2($foreign.unsafeHasFn);
  var unsafeGet = Data_Function_Uncurried.runFn2($foreign.unsafeGetFn);
  exports["unsafeGet"] = unsafeGet;
  exports["unsafeHas"] = unsafeHas;
})(PS["Data.Record.Unsafe"] = PS["Data.Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var TypeEquals = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  };
  var refl = new TypeEquals(function (a) {
      return a;
  }, function (a) {
      return a;
  });
  var from = function (dict) {
      return dict.from;
  };
  exports["TypeEquals"] = TypeEquals;
  exports["from"] = from;
  exports["to"] = to;
  exports["refl"] = refl;
})(PS["Type.Equality"] = PS["Type.Equality"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Record_Unsafe = PS["Data.Record.Unsafe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];
  var Type_Row = PS["Type.Row"];
  var VariantMatchCases = {};
  var variantMatchNil = VariantMatchCases;
  var variantMatchCons = function (dictVariantMatchCases) {
      return function (dictRowCons) {
          return function (dictTypeEquals) {
              return VariantMatchCases;
          };
      };
  };
  exports["VariantMatchCases"] = VariantMatchCases;
  exports["variantMatchCons"] = variantMatchCons;
  exports["variantMatchNil"] = variantMatchNil;
})(PS["Data.Variant.Internal"] = PS["Data.Variant.Internal"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Record_Unsafe = PS["Data.Record.Unsafe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Variant_Internal = PS["Data.Variant.Internal"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var onMatch = function (dictRowToList) {
      return function (dictVariantMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          var v1 = Unsafe_Coerce.unsafeCoerce(v);
                          if (Data_Record_Unsafe.unsafeHas(v1.type)(r)) {
                              return Data_Record_Unsafe.unsafeGet(v1.type)(r)(v1.value);
                          };
                          return k(Unsafe_Coerce.unsafeCoerce(v));
                      };
                  };
              };
          };
      };
  };
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith((function () {
          var v = Unsafe_Coerce.unsafeCoerce(r);
          return "Data.Variant: pattern match failure [" + (v.type + "]");
      })());
  };
  var match = function (dictRowToList) {
      return function (dictVariantMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return onMatch(dictRowToList)(dictVariantMatchCases)(dictUnion)(r)(case_);
              };
          };
      };
  };
  exports["case_"] = case_;
  exports["match"] = match;
  exports["onMatch"] = onMatch;
})(PS["Data.Variant"] = PS["Data.Variant"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Variant = PS["Data.Variant"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];        
  var HasTSRep = function (toTSRep) {
      this.toTSRep = toTSRep;
  };
  var toTSRep = function (dict) {
      return dict.toTSRep;
  };
  var stringHasTSRep = new HasTSRep(function (v) {
      return "string";
  });
  exports["HasTSRep"] = HasTSRep;
  exports["toTSRep"] = toTSRep;
  exports["stringHasTSRep"] = stringHasTSRep;
})(PS["OhYes"] = PS["OhYes"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Variant = PS["Data.Variant"];
  var Data_Variant_Internal = PS["Data.Variant.Internal"];
  var OhYes = PS["OhYes"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Fruit = function (x) {
      return x;
  };
  var hasTSRepFruit = OhYes.stringHasTSRep;
  var eqFruit = Data_Eq.eqString;
  var utils = (function () {
      var processAction = function (state) {
          return Data_Variant.match()(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()({
              addFruit: function (value) {
                  var $2 = {};
                  for (var $3 in state) {
                      if ({}.hasOwnProperty.call(state, $3)) {
                          $2[$3] = state[$3];
                      };
                  };
                  $2.fruits = Data_Array.snoc(state.fruits)(value.fruit);
                  return $2;
              }, 
              removeFruit: function (value) {
                  var $5 = {};
                  for (var $6 in state) {
                      if ({}.hasOwnProperty.call(state, $6)) {
                          $5[$6] = state[$6];
                      };
                  };
                  $5.fruits = Data_Array.filter(Data_Eq.notEq(eqFruit)(value.fruit))(state.fruits);
                  return $5;
              }
          });
      };
      var initialState = {
          fruits: [  ]
      };
      return {
          processAction: processAction, 
          initialState: initialState
      };
  })();
  exports["Fruit"] = Fruit;
  exports["utils"] = utils;
  exports["eqFruit"] = eqFruit;
  exports["hasTSRepFruit"] = hasTSRepFruit;
})(PS["Main"] = PS["Main"] || {});
module.exports = PS.Main 
